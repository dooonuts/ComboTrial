/***************************************************************************//**
 *   @file   Communication.c
 *   @brief  Implementation of Communication Driver.
 *   @author DBogdan (dragos.bogdan@analog.com)
********************************************************************************
 * Copyright 2012(c) Analog Devices, Inc.
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *  - Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  - Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *  - Neither the name of Analog Devices, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *  - The use of this software may or may not infringe the patent rights
 *    of one or more patent holders.  This license does not release you
 *    from the requirement that you obtain separate licenses from these
 *    patent holders to use this software.
 *  - Use of the software either in source or binary form, must be run
 *    on or directly connected to an Analog Devices Inc. component.
 *
 * THIS SOFTWARE IS PROVIDED BY ANALOG DEVICES "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, NON-INFRINGEMENT,
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL ANALOG DEVICES BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, INTELLECTUAL PROPERTY RIGHTS, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
********************************************************************************
 *   SVN Revision: 570
*******************************************************************************/

/******************************************************************************/
/* Include Files                                                              */
/******************************************************************************/
#include "Communication.h"
#include <pic18f46k22.h>

/******************************************************************************/
/* Define variables                                                           */
/******************************************************************************/

/* Define the SPI bits */
#define SPI_ENABLE          SSP1CON1bits.SSPEN
#define SPI_CLOCK_POLARITY  SSP1CON1bits.CKP
#define SPI_FOSCbit0        SSP1CON1bits.SSPM0 //Set Clock to run on FOSC/4 for SPI 
#define SPI_FOSCbit1        SSP1CON1bits.SSPM1
#define SPI_FOSCbit2        SSP1CON1bits.SSPM2
#define SPI_FOSCbit3        SSP1CON1bits.SSPM3
#define SPI_CLOCK_EDGE      SSP1STATbits.CKE
#define SPI_SAMPLING        SSP1STATbits.SMP

/* Define the SPI bits for the data buffer */
#define SPI_DATA_BUFFER     SSP1BUFbits.SSPBUF
#define SPI_DATA_CHECK      SSP1STATbits.BF

/* Define the pins of the SPI */
#define SPI_CLOCK_DIR       TRISCbits.RC3 // SCLK on RC3
#define SPI_DATA_IN         TRISCbits.RC4 // ADAS SDO to RC4
#define SPI_DATA_OUT        TRISCbits.RC5 // ADAS SDI to RC5
#define SPI_SLAVE_SELECT    TRISAbits.RA0 // ADAS CS to RA0

/***************************************************************************//**
 * @brief Initializes the SPI communication peripheral.
 *
 * @param lsbFirst - Transfer format (0 or 1).
 *                   Example: 0x0 - MSB first.
 *                            0x1 - LSB first.
 * @param clockFreq - SPI clock frequency (Hz).
 *                    Example: 1000 - SPI clock frequency is 1 kHz.
 * @param clockPol - SPI clock polarity (0 or 1).
 *                   Example: 0x0 - idle state for SPI clock is low.
 *	                          0x1 - idle state for SPI clock is high.
 * @param clockPha - SPI clock phase (0 or 1).
 *                   Example: 0x0 - data is latched on the leading edge of SPI
 *                                  clock and data changes on trailing edge.
 *                            0x1 - data is latched on the trailing edge of SPI
 *                                  clock and data changes on the leading edge.
 *
 * @return 0 - Initialization failed, 1 - Initialization succeeded.
*******************************************************************************/
unsigned char SPI_Init(unsigned char lsbFirst,
                       unsigned long clockFreq,
                       unsigned char clockPol,
                       unsigned char clockPha)
{
    // SPI_SAMPLING = 0; // Master mode sampling occurs at the middle of data output time
    SPI_SAMPLING = 1; //Master mode sampling occurs at the end of data output time (What we originally thought it was)
    SPI_CLOCK_POLARITY = 1; // Idle state for clock is high
    SPI_CLOCK_EDGE = 0; // Transmit occurs on transition from active to Idle clock state (what we originally thought it was))
    // -SPI_CLOCK_EDGE = 1; // Transmit occurs on transition from idle to active clock state 
    //SPI CLOCK RATE
    SPI_FOSCbit0 = 0;
    SPI_FOSCbit1 = 0;
    SPI_FOSCbit2 = 0;
    SPI_FOSCbit3 = 0;
    
    // ENABLE SPI
    SPI_ENABLE = 1;
    // ENABLE MASTER MODE
    SPI_CLOCK_DIR = 0; // output
    SPI_DATA_IN = 1;
    SPI_DATA_OUT = 0;
    SPI_SLAVE_SELECT = 0; // output   
    return 1;
}

/***************************************************************************//**
 * @brief Writes data to SPI.
 *
 * @param data - data represents the write buffer.
 * @param bytesNumber - Number of bytes to write.
 *
 * @return Number of written bytes.
*******************************************************************************/
unsigned char SPI_Write(unsigned char* data,
						unsigned char bytesNumber)
// void SPI_Write()
{
    unsigned char i;
    
    /* To begin the frame, bring CS to LOW */
    LATAbits.LA0 = 0;
    
    for(i = 0; i < bytesNumber; i++){
        SPI_DATA_BUFFER = *data;
        while(!SPI_DATA_CHECK);
        data++;
    }
    
    /* To end the frame, bring CS back HIGH */
    LATAbits.LA0 = 1;

	return bytesNumber;
    
    //SPI_DATA_BUFFER = 0xA5; 
    //while (!SPI_DATA_CHECK);
    //return 1;
}

/***************************************************************************//**
 * @brief Reads data from SPI.
 *
 * @param data - Data represents the read buffer.
 * @param bytesNumber - Number of bytes to read.
 *
 * @return Number of read bytes.
*******************************************************************************/
unsigned char SPI_Read(unsigned char* data,
					   unsigned char bytesNumber)
{
    unsigned char i;
    
    /* To begin the frame, bring CS to LOW */
    LATAbits.LA0 = 0;

    for(i = 0; i < bytesNumber; i++){
        SPI_DATA_BUFFER = 0;
        while(!SPI_DATA_CHECK); // When transmission has yet to be completed, stalls
        *data++ = SPI_DATA_BUFFER;
    }
    
    /* To begin the frame, bring CS to LOW */
    LATAbits.LA0 = 1;
    
    return bytesNumber;
}
